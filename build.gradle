plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.8'
}

group = 'io.greitan'
version = project.hasProperty('VERSION') ? project.VERSION : 'UNKNOWN'

repositories {
    mavenCentral()
    maven {
        name = "CodeMC"
        url = uri("https://repo.codemc.io/repository/maven-public/")
    }
    maven {
        name = "PaperMC"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "PlaceholderAPI"
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven { 
        name = "jitpack"
        url = "https://jitpack.io"
    }
}

dependencies {
    compileOnly 'dev.folia:folia-api:1.20.4-R0.1-SNAPSHOT'
    compileOnly 'io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT'
    compileOnly 'me.clip:placeholderapi:2.11.6'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation "com.github.technicallycoded:FoliaLib:0.4.3"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}

tasks.withType(Test) {
    systemProperty 'file.encoding', 'UTF-8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

shadowJar {
    archiveClassifier.set('all')
    relocate 'com.tcoded.folialib', 'io.greitan.voice.folialib' 
}

task deleteUnusableJar(type: Delete) {
    doLast {
        file("build/libs").listFiles().each { File file ->
            if (file.name.endsWith(".jar") && !file.name.contains("-all")) {
                file.delete()
            }
        }
    }
}

task copyToTestServer(type: Copy) {
    from shadowJar
    into "D:\\JavaTest\\plugins"
}
copyToTestServer.dependsOn shadowJar

build.finalizedBy shadowJar
shadowJar.finalizedBy deleteUnusableJar
if (project.hasProperty('DEV')) shadowJar.finalizedBy copyToTestServer